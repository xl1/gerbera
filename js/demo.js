// Generated by CoffeeScript 1.7.1
(function() {
  var $, Editor;

  $ = function(id) {
    return document.getElementById(id);
  };

  Editor = (function() {
    function Editor(editorId, outId, errorId, canvasAreaId) {
      this.isRunning = false;
      this.editor = ace.edit(editorId);
      this.out = $(outId);
      this.error = $(errorId);
      this.gl = new MicroGL({
        antialias: false
      }).init($(canvasAreaId), 512, 512);
      this.t = Date.now();
      this.editor.getSession().setMode('ace/mode/javascript');
      this.editor.commands.addCommands([
        {
          name: 'execute',
          bindKey: 'Ctrl-Enter',
          exec: (function(_this) {
            return function() {
              return _this.convert() && _this.execute();
            };
          })(this)
        }
      ]);
    }

    Editor.prototype.convert = function() {
      var e;
      try {
        this.program = Gerbera.compileShader({
          minify: false,
          attributes: {
            position: Gerbera.vec4
          },
          uniforms: {
            time: Gerbera.float
          },
          vertex: function(attr, unif) {
            var gl_Position;
            gl_Position = attr.position;
          },
          fragment: "function(uniforms, varyings){" + (this.editor.getValue()) + "}"
        });
      } catch (_error) {
        e = _error;
        this.error.textContent = e.message;
        return false;
      }
      this.error.textContent = '';
      this.out.textContent = this.program.fragment;
      return true;
    };

    Editor.prototype.execute = function() {
      this.t = Date.now();
      this.gl.program(this.program.vertex, this.program.fragment).bindVars({
        position: [-1, -1, 0, 1, -1, 1, 0, 1, 1, -1, 0, 1, 1, 1, 0, 1]
      });
      if (!this.isRunning) {
        this.isRunning = true;
        return this.update();
      }
    };

    Editor.prototype.update = function() {
      if (!this.isRunning) {
        return;
      }
      this.gl.bindVars({
        time: Date.now() - this.t
      }).clear().draw();
      return requestAnimationFrame((function(_this) {
        return function() {
          return _this.update();
        };
      })(this));
    };

    return Editor;

  })();

  document.addEventListener('DOMContentLoaded', function() {
    var editor;
    editor = new Editor('editor', 'converted', 'error', 'canvas');
    editor.editor.setValue('// JavaScript code here\nfunction mult(a, b){\n	return new vec2(\n		a[0] * b[0] - a[1] * b[1],\n		a[0] * b[1] + a[1] * b[0]\n	);\n}\n\nvar t = uniforms.time / 4e3 + 2,\n	c = new vec2(\n		(gl_FragCoord[0] - 250) * Math.exp(-t) + 0.375,\n		(gl_FragCoord[1] - 150) * Math.exp(-t) + 0.225\n	),\n	z = c,\n	d = 0;\n\nfor(var i = 0; i < 999; i++){\n	if(float.length(z) > 2) break;\n	z = vec2.add(mult(z, z), c);\n	d += 0.2;\n}\ngl_FragColor = new vec4(\n	(Math.cos(d) + 1) / 2,\n	(Math.sin(d) + 1) / 2,\n	log(d),\n	1\n);');
    return editor.convert() && editor.execute();
  }, false);

}).call(this);
